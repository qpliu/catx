#!/bin/sh
exec 2>&1
LILYPOND_VERSION="2.20.0"
set -e
pwd=`pwd`
name=`basename "$pwd"`
buildbuild=`dirname "$0"`/`readlink "$0"`
build=`dirname "$buildbuild"`
cd "$build"
build=`pwd`
PARTS="$*"
BINDIR="$build/bin/$name"
rm -rf "$BINDIR"/bin "$BINDIR"/src "$BINDIR"/src-* "$BINDIR"/java
mkdir -p "$BINDIR"/bin "$BINDIR"/src "$BINDIR"/java "$BINDIR"/ecantorix-cache
cd "$BINDIR"/java
ln "$build"/java/* .
javac -Xlint *.java
cd "$build"
ln swing.ly *.i *.wav timidity_extra_silence.cfg "$BINDIR"/src
cp "$pwd"/* "$BINDIR"/src||true
doiftabscolorsdotext(){
    mkdir "../src-$1"
    for a in *
    do
	case "$a" in
	    *.gp5) ;;
	    *.gp4) ;;
	    *.wav) ;;
	    *.midi) ;;
	    *)
		"$build/doif.py" <"$a" >"../src-$1/$a" "$1"
		;;
	esac
    done
    cd "../src-$1"
    for a in *tabs
    do
	if test -f "$a"
	then
	    aa=`basename "$a" tabs`
	    "$build/tabsToLy.py" <"$a" >"$aa"
	fi
    done
    for a in *colors
    do
	if test -f "$a"
	then
	    aa=`basename "$a" colors`
	    "$build/synesthesia.py" <"$a" >"$aa"
	fi
    done
    for a in *_dotext
    do
	if test -f "$a"
	then
	    b=`basename "$a" _dotext`
	    "$build/dotext.py" "$b"
	fi
    done
}
cd "$BINDIR"/src
if test -x run_before
then
    ./run_before
fi
echo "name=$name" >../bin/out.aarin
sed <music -n -e 's/^% ROBOT \(.*\)$/\1/p' >>../bin/out.aarin
MERGEMIDI=`sed <music -n -e 's/^% MERGEMIDI \(.*\)$/\1/p'`
for part in $PARTS
do
    if test "x$part" = "xmidi"
    then
	merge="$MERGEMIDI"
	merge_karaoke=""
# Make sure these names of midi tracks agree with aarinrobo/c/midi.c
	for midi in midiAarinrobo midiCue midiGg midiPeter midiKav midiSusan midiBass midiKaraoke midiKaraokeTwo midiVocaloid midiVocaloidTwo midiMuted midiOne midiTwo
	do
	    doiftabscolorsdotext "$midi"
	    if grep -q "$midi" *
	    then
		cat <<EOF >in.ly
\version "$LILYPOND_VERSION"
\include "header.i"
\include "music"
\score {
    \unfoldRepeats \articulate \keepWithTag #'($midi keep) \removeWithTag #'(removeWithUnfold) \midimusic
    \midi { }
}
EOF
		lilypond -l WARN -o out in.ly
		case "$midi" in
		    midiKaraoke*|midiVocaloid*|midiMuted)
			merge_karaoke="$merge_karaoke $midi ../src-$midi/out.midi"
			;;
		    *)
			merge="$merge $midi ../src-$midi/out.midi"
			;;
		esac
	    fi
	    cd ../src
	done
	java -cp ../java MergeMidi $merge $merge_karaoke >out.midi
	java -cp ../java MergeMidi $merge >out_no_karaoke.midi
	if type timidity ffmpeg >/dev/null 2>&1 && ! grep -q '^% NO_MP3' music
	then
	    for a in *.mp3
	    do
		if test -f "$a"
		then
		    b=`basename "$a" .mp3`
		    ffmpeg </dev/null -loglevel 16 -i "$a" "$b".wav
		fi
	    done
	    TIMIDITY_EXTRA_CFG="-c timidity_extra_silence.cfg"
	    if test -f timidity_extra.cfg
	    then
		TIMIDITY_EXTRA_CFG="$TIMIDITY_EXTRA_CFG -c timidity_extra.cfg"
	    fi
	    timidity $TIMIDITY_EXTRA_CFG -OF -o out.flac out_no_karaoke.midi
	    for vocaloid in midiVocaloid midiVocaloidTwo
	    do
		java -cp ../java MakeVocaloid <out.midi "$vocaloid" >"$vocaloid".log
		mv MakeVocaloid.mid "$vocaloid".mid
		mv MakeVocaloid.wav "$vocaloid".wav
	    done
	    FILTER="[0:a]volume=2[a0]"
	    FILTER="$FILTER;[1:a]volume=.4[a1]"
	    FILTER="$FILTER;[2:a]volume=.4[a2]"
	    FILTER="$FILTER;[a0][a1][a2]amix=inputs=3:duration=first[out]"
	    ffmpeg </dev/null -loglevel 16 -i out.flac -i midiVocaloid.wav -i midiVocaloidTwo.wav -filter_complex "$FILTER" -map '[out]' out.mp3
	    if test -d /share/music
	    then
		cp out.mp3 "/share/music/mp3/$name.mp3"
	    fi
	fi
	cp out.midi "../bin/$name.midi"
	if test -d /share/music
	then
	    cp out.midi "/share/music/midi/$name.midi"
	    echo "midi_file=../midi/$name.midi" >>../bin/out.aarin
	fi
    else
	doiftabscolorsdotext "$part"
	part1=`echo $part|sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g'`
	cat <<EOF >in.ly
\version "$LILYPOND_VERSION"
\include "header.i"
\include "music"
\score {
    \keepWithTag #'(${part1}Part keep) \layoutmusic
    \layout {
	indent = 0\cm
	short-indent = 0\cm
	ragged-last = ##t
    }
}
EOF
	lilypond -l WARN -o out in.ly
	cp out.pdf "../bin/${name}_${part}.pdf"
	if test "$part" = gg
	then
	    echo "default_pdf_file=../pdf/$name/$part.pdf" >>../bin/out.aarin
	fi
	echo "pdf_file=../pdf/$name/$part.pdf" >>../bin/out.aarin
	if test -d /share/music
	then
	    mkdir -p "/share/music/pdf/$name"
	    cp out.pdf "/share/music/pdf/$name/$part.pdf"
	    rm -rf "/share/music/svg/$name/$part"
	    mkdir -p "/share/music/svg/$name/$part"
	    page=1
	    while pdf2svg out.pdf temp.svg $page >/dev/null 2>&1
	    do
		java -cp ../java FindMeasuresInSvg "measure=$part $page" <temp.svg >>../bin/out.aarin
		gzip <temp.svg >"/share/music/svg/$name/$part/$page.svg.gz"
		page=`echo print $page+1|python2.7`
	    done
	fi
    fi
    cd ../src
done
cd ..
if test -d /share/music
then
    cp bin/out.aarin "/share/music/aarin/$name.aarin"
    grep '^measure=' bin/out.aarin|cut -f 1 -d ' '|uniq -c
fi
